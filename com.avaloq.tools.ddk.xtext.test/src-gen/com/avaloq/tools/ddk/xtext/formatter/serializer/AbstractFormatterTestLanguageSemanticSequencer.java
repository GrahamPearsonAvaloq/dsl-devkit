/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.xtext.formatter.serializer;

import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.Assign;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.Datatypes;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.Decl;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.Enumeration;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.FormatterTestLanguagePackage;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.FqnObj;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.FqnRef;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.Meth;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.Param;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.Space;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.SuppressedHidden;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.SuppressedHiddenSubID;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.SuppressedHiddenSubSub;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.TestColumn;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.TestIndentation;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.TestLinewrap;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.TestLinewrapMinMax;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.TestOffset;
import com.avaloq.tools.ddk.xtext.formatter.formatterTestLanguage.TestRightPadding;
import com.avaloq.tools.ddk.xtext.formatter.services.FormatterTestLanguageGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractFormatterTestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FormatterTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == FormatterTestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case FormatterTestLanguagePackage.ASSIGN:
				sequence_Assign(context, (Assign) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.DATATYPES:
				sequence_Datatypes(context, (Datatypes) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.DECL:
				sequence_Decl(context, (Decl) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.FQN_OBJ:
				sequence_FqnObj(context, (FqnObj) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.FQN_REF:
				sequence_FqnRef(context, (FqnRef) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.METH:
				sequence_Meth(context, (Meth) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.PARAM:
				sequence_Param(context, (Param) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.SPACE:
				sequence_Space(context, (Space) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.SUPPRESSED_HIDDEN:
				sequence_SuppressedHidden(context, (SuppressedHidden) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.SUPPRESSED_HIDDEN_SUB_ID:
				sequence_SuppressedHiddenSubID(context, (SuppressedHiddenSubID) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.SUPPRESSED_HIDDEN_SUB_SUB:
				sequence_SuppressedHiddenSubSub(context, (SuppressedHiddenSubSub) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.TEST_COLUMN:
				sequence_TestColumn(context, (TestColumn) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.TEST_INDENTATION:
				sequence_TestIndentation(context, (TestIndentation) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.TEST_LINEWRAP:
				sequence_TestLinewrap(context, (TestLinewrap) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.TEST_LINEWRAP_MIN_MAX:
				sequence_TestLinewrapMinMax(context, (TestLinewrapMinMax) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.TEST_OFFSET:
				sequence_TestOffset(context, (TestOffset) semanticObject); 
				return; 
			case FormatterTestLanguagePackage.TEST_RIGHT_PADDING:
				sequence_TestRightPadding(context, (TestRightPadding) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (var=ID (op='=' | op='+=') (val+=INT val+=INT*)?)
	 */
	protected void sequence_Assign(EObject context, Assign semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (val1=Datatype1 val2=Datatype2 val3=Datatype3)
	 */
	protected void sequence_Datatypes(EObject context, Datatypes semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.DATATYPES__VAL1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.DATATYPES__VAL1));
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.DATATYPES__VAL2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.DATATYPES__VAL2));
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.DATATYPES__VAL3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.DATATYPES__VAL3));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDatatypesAccess().getVal1Datatype1ParserRuleCall_1_0(), semanticObject.getVal1());
		feeder.accept(grammarAccess.getDatatypesAccess().getVal2Datatype2ParserRuleCall_3_0(), semanticObject.getVal2());
		feeder.accept(grammarAccess.getDatatypesAccess().getVal3Datatype3ParserRuleCall_4_0(), semanticObject.getVal3());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type+=ID name+=ID)
	 */
	protected void sequence_Decl(EObject context, Decl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (val+=Enum1+ val+=Enum1*)
	 */
	protected void sequence_Enumeration(EObject context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=FQN
	 */
	protected void sequence_FqnObj(EObject context, FqnObj semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.FQN_OBJ__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.FQN_OBJ__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFqnObjAccess().getNameFQNParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ref=[FqnObj|FQN]
	 */
	protected void sequence_FqnRef(EObject context, FqnRef semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.FQN_REF__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.FQN_REF__REF));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFqnRefAccess().getRefFqnObjFQNParserRuleCall_1_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID (param+=Param param+=Param*)?)
	 */
	protected void sequence_Meth(EObject context, Meth semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name+=ID type+=ID)
	 */
	protected void sequence_Param(EObject context, Param semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     val=ID
	 */
	protected void sequence_Space(EObject context, Space semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.SPACE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.SPACE__VAL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSpaceAccess().getValIDTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     idval=ID
	 */
	protected void sequence_SuppressedHiddenSubID(EObject context, SuppressedHiddenSubID semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.SUPPRESSED_HIDDEN_SUB__IDVAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.SUPPRESSED_HIDDEN_SUB__IDVAL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSuppressedHiddenSubIDAccess().getIdvalIDTerminalRuleCall_0(), semanticObject.getIdval());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     idval=ID
	 */
	protected void sequence_SuppressedHiddenSubSub(EObject context, SuppressedHiddenSubSub semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.SUPPRESSED_HIDDEN_SUB__IDVAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.SUPPRESSED_HIDDEN_SUB__IDVAL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSuppressedHiddenSubSubAccess().getIdvalIDTerminalRuleCall_1_0(), semanticObject.getIdval());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((vals+=SuppressedHiddenSub vals+=SuppressedHiddenSub*)?)
	 */
	protected void sequence_SuppressedHidden(EObject context, SuppressedHidden semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID? items+=Line*)
	 */
	protected void sequence_TestColumn(EObject context, TestColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((sub+=TestIndentation | items+=Line)* semi?=';'?)
	 */
	protected void sequence_TestIndentation(EObject context, TestIndentation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (items+=Line*)
	 */
	protected void sequence_TestLinewrapMinMax(EObject context, TestLinewrapMinMax semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (items+=Line*)
	 */
	protected void sequence_TestLinewrap(EObject context, TestLinewrap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value=ID first=ID second=ID)
	 */
	protected void sequence_TestOffset(EObject context, TestOffset semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.TEST_OFFSET__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.TEST_OFFSET__VALUE));
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.TEST_OFFSET__FIRST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.TEST_OFFSET__FIRST));
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.TEST_OFFSET__SECOND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.TEST_OFFSET__SECOND));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTestOffsetAccess().getValueIDTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTestOffsetAccess().getFirstIDTerminalRuleCall_5_0(), semanticObject.getFirst());
		feeder.accept(grammarAccess.getTestOffsetAccess().getSecondIDTerminalRuleCall_6_0(), semanticObject.getSecond());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (p1=ID p2=ID)
	 */
	protected void sequence_TestRightPadding(EObject context, TestRightPadding semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.TEST_RIGHT_PADDING__P1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.TEST_RIGHT_PADDING__P1));
			if(transientValues.isValueTransient(semanticObject, FormatterTestLanguagePackage.Literals.TEST_RIGHT_PADDING__P2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormatterTestLanguagePackage.Literals.TEST_RIGHT_PADDING__P2));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTestRightPaddingAccess().getP1IDTerminalRuleCall_1_0(), semanticObject.getP1());
		feeder.accept(grammarAccess.getTestRightPaddingAccess().getP2IDTerminalRuleCall_2_0(), semanticObject.getP2());
		feeder.finish();
	}
}
