/*******************************************************************************
 * Copyright (c) 2016 Avaloq Evolution AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Evolution AG - initial API and implementation
 *******************************************************************************/
import com::avaloq::tools::ddk::xtext::expression::expression;
import com::avaloq::tools::ddk::xtext::generator::expression;

String serialize(Expression this) :
  JAVA com.avaloq.tools.ddk.xtext.generator.expression.ExpressionExtensions.serialize(com.avaloq.tools.ddk.xtext.expression.expression.Expression)
;

String serialize(Void this) :
  null
;

boolean isEmptyList(Expression this) :
  false
;

boolean isEmptyList(ListLiteral this) :
  elements.isEmpty
;

boolean isSimpleConcatCall(OperationCall this) :
	name == '+' && type == null && target == null && !params.isEmpty
;

boolean isNumber(Expression this, CompilationContext ctx) :
    ctx.findType('Real').isAssignableFrom(ctx.analyze(this))
;

boolean isArithmeticOperatorCall(OperationCall this, CompilationContext ctx) :
    type == null && target == null && params.size > 1 && (name == '+' || name == '-' || name == '*' || name == '/') && params.forAll(p|p.isNumber(ctx))
;

boolean isArithmeticOperatorCall(Expression this, CompilationContext ctx) :
    false
;

boolean isPrefixExpression(Expression this, CompilationContext ctx) :
    false
;

boolean isPrefixExpression(OperationCall this, CompilationContext ctx) :
    type == null && target == null && params.size == 1 && (name == '-' || name == '!')
;

boolean isInfixExpression(Void this, CompilationContext ctx) :
    false
;

boolean isInfixExpression(Expression this, CompilationContext ctx) :
    false
;

boolean isInfixExpression(OperationCall this, CompilationContext ctx) :
    isArithmeticOperatorCall(ctx) || 'isInstance' == name
;

boolean isInfixExpression(IfExpression this, CompilationContext ctx) :
    true
;

boolean isInfixExpression(BooleanOperation this, CompilationContext ctx) :
    true
;

String calledFeature(FeatureCall this) :
	type.id.first()
;
