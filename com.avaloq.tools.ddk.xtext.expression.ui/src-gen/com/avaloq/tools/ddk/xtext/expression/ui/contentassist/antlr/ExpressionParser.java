/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.xtext.expression.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.avaloq.tools.ddk.xtext.expression.services.ExpressionGrammarAccess;

public class ExpressionParser extends AbstractContentAssistParser {
	
	@Inject
	private ExpressionGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.avaloq.tools.ddk.xtext.expression.ui.contentassist.antlr.internal.InternalExpressionParser createParser() {
		com.avaloq.tools.ddk.xtext.expression.ui.contentassist.antlr.internal.InternalExpressionParser result = new com.avaloq.tools.ddk.xtext.expression.ui.contentassist.antlr.internal.InternalExpressionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getSyntaxElementAccess().getAlternatives(), "rule__SyntaxElement__Alternatives");
					put(grammarAccess.getChainedExpressionAccess().getAlternatives(), "rule__ChainedExpression__Alternatives");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__RelationalExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getAdditiveExpressionAccess().getNameAlternatives_1_1_0(), "rule__AdditiveExpression__NameAlternatives_1_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getNameAlternatives_1_1_0(), "rule__MultiplicativeExpression__NameAlternatives_1_1_0");
					put(grammarAccess.getUnaryOrInfixExpressionAccess().getAlternatives(), "rule__UnaryOrInfixExpression__Alternatives");
					put(grammarAccess.getUnaryExpressionAccess().getNameAlternatives_0_0(), "rule__UnaryExpression__NameAlternatives_0_0");
					put(grammarAccess.getInfixExpressionAccess().getAlternatives_1(), "rule__InfixExpression__Alternatives_1");
					put(grammarAccess.getInfixExpressionAccess().getNameAlternatives_1_3_2_0(), "rule__InfixExpression__NameAlternatives_1_3_2_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBooleanLiteralAccess().getValAlternatives_0(), "rule__BooleanLiteral__ValAlternatives_0");
					put(grammarAccess.getFeatureCallAccess().getAlternatives(), "rule__FeatureCall__Alternatives");
					put(grammarAccess.getCollectionExpressionAccess().getNameAlternatives_0_0(), "rule__CollectionExpression__NameAlternatives_0_0");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getCollectionTypeAccess().getClAlternatives_0_0(), "rule__CollectionType__ClAlternatives_0_0");
					put(grammarAccess.getLetExpressionAccess().getGroup(), "rule__LetExpression__Group__0");
					put(grammarAccess.getCastedExpressionAccess().getGroup(), "rule__CastedExpression__Group__0");
					put(grammarAccess.getChainExpressionAccess().getGroup(), "rule__ChainExpression__Group__0");
					put(grammarAccess.getChainExpressionAccess().getGroup_1(), "rule__ChainExpression__Group_1__0");
					put(grammarAccess.getIfExpressionTriAccess().getGroup(), "rule__IfExpressionTri__Group__0");
					put(grammarAccess.getIfExpressionTriAccess().getGroup_1(), "rule__IfExpressionTri__Group_1__0");
					put(grammarAccess.getIfExpressionKwAccess().getGroup(), "rule__IfExpressionKw__Group__0");
					put(grammarAccess.getIfExpressionKwAccess().getGroup_4(), "rule__IfExpressionKw__Group_4__0");
					put(grammarAccess.getIfExpressionKwAccess().getGroup_4_0(), "rule__IfExpressionKw__Group_4_0__0");
					put(grammarAccess.getSwitchExpressionAccess().getGroup(), "rule__SwitchExpression__Group__0");
					put(grammarAccess.getSwitchExpressionAccess().getGroup_1(), "rule__SwitchExpression__Group_1__0");
					put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getImpliesExpressionAccess().getGroup(), "rule__ImpliesExpression__Group__0");
					put(grammarAccess.getImpliesExpressionAccess().getGroup_1(), "rule__ImpliesExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
					put(grammarAccess.getInfixExpressionAccess().getGroup(), "rule__InfixExpression__Group__0");
					put(grammarAccess.getInfixExpressionAccess().getGroup_1_0(), "rule__InfixExpression__Group_1_0__0");
					put(grammarAccess.getInfixExpressionAccess().getGroup_1_0_4(), "rule__InfixExpression__Group_1_0_4__0");
					put(grammarAccess.getInfixExpressionAccess().getGroup_1_0_4_1(), "rule__InfixExpression__Group_1_0_4_1__0");
					put(grammarAccess.getInfixExpressionAccess().getGroup_1_1(), "rule__InfixExpression__Group_1_1__0");
					put(grammarAccess.getInfixExpressionAccess().getGroup_1_2(), "rule__InfixExpression__Group_1_2__0");
					put(grammarAccess.getInfixExpressionAccess().getGroup_1_3(), "rule__InfixExpression__Group_1_3__0");
					put(grammarAccess.getInfixExpressionAccess().getGroup_1_3_4(), "rule__InfixExpression__Group_1_3_4__0");
					put(grammarAccess.getParanthesizedExpressionAccess().getGroup(), "rule__ParanthesizedExpression__Group__0");
					put(grammarAccess.getGlobalVarExpressionAccess().getGroup(), "rule__GlobalVarExpression__Group__0");
					put(grammarAccess.getOperationCallAccess().getGroup(), "rule__OperationCall__Group__0");
					put(grammarAccess.getOperationCallAccess().getGroup_2(), "rule__OperationCall__Group_2__0");
					put(grammarAccess.getOperationCallAccess().getGroup_2_1(), "rule__OperationCall__Group_2_1__0");
					put(grammarAccess.getListLiteralAccess().getGroup(), "rule__ListLiteral__Group__0");
					put(grammarAccess.getListLiteralAccess().getGroup_2(), "rule__ListLiteral__Group_2__0");
					put(grammarAccess.getListLiteralAccess().getGroup_2_1(), "rule__ListLiteral__Group_2_1__0");
					put(grammarAccess.getConstructorCallExpressionAccess().getGroup(), "rule__ConstructorCallExpression__Group__0");
					put(grammarAccess.getTypeSelectExpressionAccess().getGroup(), "rule__TypeSelectExpression__Group__0");
					put(grammarAccess.getCollectionExpressionAccess().getGroup(), "rule__CollectionExpression__Group__0");
					put(grammarAccess.getCollectionExpressionAccess().getGroup_2(), "rule__CollectionExpression__Group_2__0");
					put(grammarAccess.getCollectionTypeAccess().getGroup(), "rule__CollectionType__Group__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup(), "rule__SimpleType__Group__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_1(), "rule__SimpleType__Group_1__0");
					put(grammarAccess.getLetExpressionAccess().getIdentifierAssignment_1(), "rule__LetExpression__IdentifierAssignment_1");
					put(grammarAccess.getLetExpressionAccess().getVarExprAssignment_3(), "rule__LetExpression__VarExprAssignment_3");
					put(grammarAccess.getLetExpressionAccess().getTargetAssignment_5(), "rule__LetExpression__TargetAssignment_5");
					put(grammarAccess.getCastedExpressionAccess().getTypeAssignment_1(), "rule__CastedExpression__TypeAssignment_1");
					put(grammarAccess.getCastedExpressionAccess().getTargetAssignment_3(), "rule__CastedExpression__TargetAssignment_3");
					put(grammarAccess.getChainExpressionAccess().getNextAssignment_1_2(), "rule__ChainExpression__NextAssignment_1_2");
					put(grammarAccess.getIfExpressionTriAccess().getThenPartAssignment_1_2(), "rule__IfExpressionTri__ThenPartAssignment_1_2");
					put(grammarAccess.getIfExpressionTriAccess().getElsePartAssignment_1_4(), "rule__IfExpressionTri__ElsePartAssignment_1_4");
					put(grammarAccess.getIfExpressionKwAccess().getConditionAssignment_1(), "rule__IfExpressionKw__ConditionAssignment_1");
					put(grammarAccess.getIfExpressionKwAccess().getThenPartAssignment_3(), "rule__IfExpressionKw__ThenPartAssignment_3");
					put(grammarAccess.getIfExpressionKwAccess().getElsePartAssignment_4_0_1(), "rule__IfExpressionKw__ElsePartAssignment_4_0_1");
					put(grammarAccess.getSwitchExpressionAccess().getSwitchExprAssignment_1_1(), "rule__SwitchExpression__SwitchExprAssignment_1_1");
					put(grammarAccess.getSwitchExpressionAccess().getCaseAssignment_3(), "rule__SwitchExpression__CaseAssignment_3");
					put(grammarAccess.getSwitchExpressionAccess().getDefaultExprAssignment_6(), "rule__SwitchExpression__DefaultExprAssignment_6");
					put(grammarAccess.getCaseAccess().getConditionAssignment_1(), "rule__Case__ConditionAssignment_1");
					put(grammarAccess.getCaseAccess().getThenParAssignment_3(), "rule__Case__ThenParAssignment_3");
					put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1(), "rule__OrExpression__OperatorAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
					put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AndExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
					put(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1(), "rule__ImpliesExpression__OperatorAssignment_1_1");
					put(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2(), "rule__ImpliesExpression__RightAssignment_1_2");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1(), "rule__RelationalExpression__OperatorAssignment_1_1");
					put(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2(), "rule__RelationalExpression__RightAssignment_1_2");
					put(grammarAccess.getAdditiveExpressionAccess().getNameAssignment_1_1(), "rule__AdditiveExpression__NameAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getParamsAssignment_1_2(), "rule__AdditiveExpression__ParamsAssignment_1_2");
					put(grammarAccess.getMultiplicativeExpressionAccess().getNameAssignment_1_1(), "rule__MultiplicativeExpression__NameAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getParamsAssignment_1_2(), "rule__MultiplicativeExpression__ParamsAssignment_1_2");
					put(grammarAccess.getUnaryExpressionAccess().getNameAssignment_0(), "rule__UnaryExpression__NameAssignment_0");
					put(grammarAccess.getUnaryExpressionAccess().getParamsAssignment_1(), "rule__UnaryExpression__ParamsAssignment_1");
					put(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_0_2(), "rule__InfixExpression__NameAssignment_1_0_2");
					put(grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_0(), "rule__InfixExpression__ParamsAssignment_1_0_4_0");
					put(grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_1_1(), "rule__InfixExpression__ParamsAssignment_1_0_4_1_1");
					put(grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_1_2(), "rule__InfixExpression__TypeAssignment_1_1_2");
					put(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_2_2(), "rule__InfixExpression__NameAssignment_1_2_2");
					put(grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_2_4(), "rule__InfixExpression__TypeAssignment_1_2_4");
					put(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_3_2(), "rule__InfixExpression__NameAssignment_1_3_2");
					put(grammarAccess.getInfixExpressionAccess().getVarAssignment_1_3_4_0(), "rule__InfixExpression__VarAssignment_1_3_4_0");
					put(grammarAccess.getInfixExpressionAccess().getExpAssignment_1_3_5(), "rule__InfixExpression__ExpAssignment_1_3_5");
					put(grammarAccess.getBooleanLiteralAccess().getValAssignment(), "rule__BooleanLiteral__ValAssignment");
					put(grammarAccess.getIntegerLiteralAccess().getValAssignment(), "rule__IntegerLiteral__ValAssignment");
					put(grammarAccess.getNullLiteralAccess().getValAssignment(), "rule__NullLiteral__ValAssignment");
					put(grammarAccess.getRealLiteralAccess().getValAssignment(), "rule__RealLiteral__ValAssignment");
					put(grammarAccess.getStringLiteralAccess().getValAssignment(), "rule__StringLiteral__ValAssignment");
					put(grammarAccess.getGlobalVarExpressionAccess().getNameAssignment_1(), "rule__GlobalVarExpression__NameAssignment_1");
					put(grammarAccess.getFeatureCallAccess().getTypeAssignment_1(), "rule__FeatureCall__TypeAssignment_1");
					put(grammarAccess.getOperationCallAccess().getNameAssignment_0(), "rule__OperationCall__NameAssignment_0");
					put(grammarAccess.getOperationCallAccess().getParamsAssignment_2_0(), "rule__OperationCall__ParamsAssignment_2_0");
					put(grammarAccess.getOperationCallAccess().getParamsAssignment_2_1_1(), "rule__OperationCall__ParamsAssignment_2_1_1");
					put(grammarAccess.getListLiteralAccess().getElementsAssignment_2_0(), "rule__ListLiteral__ElementsAssignment_2_0");
					put(grammarAccess.getListLiteralAccess().getElementsAssignment_2_1_1(), "rule__ListLiteral__ElementsAssignment_2_1_1");
					put(grammarAccess.getConstructorCallExpressionAccess().getTypeAssignment_1(), "rule__ConstructorCallExpression__TypeAssignment_1");
					put(grammarAccess.getTypeSelectExpressionAccess().getNameAssignment_0(), "rule__TypeSelectExpression__NameAssignment_0");
					put(grammarAccess.getTypeSelectExpressionAccess().getTypeAssignment_2(), "rule__TypeSelectExpression__TypeAssignment_2");
					put(grammarAccess.getCollectionExpressionAccess().getNameAssignment_0(), "rule__CollectionExpression__NameAssignment_0");
					put(grammarAccess.getCollectionExpressionAccess().getVarAssignment_2_0(), "rule__CollectionExpression__VarAssignment_2_0");
					put(grammarAccess.getCollectionExpressionAccess().getExpAssignment_3(), "rule__CollectionExpression__ExpAssignment_3");
					put(grammarAccess.getCollectionTypeAccess().getClAssignment_0(), "rule__CollectionType__ClAssignment_0");
					put(grammarAccess.getCollectionTypeAccess().getId1Assignment_2(), "rule__CollectionType__Id1Assignment_2");
					put(grammarAccess.getSimpleTypeAccess().getIdAssignment_0(), "rule__SimpleType__IdAssignment_0");
					put(grammarAccess.getSimpleTypeAccess().getIdAssignment_1_1(), "rule__SimpleType__IdAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.avaloq.tools.ddk.xtext.expression.ui.contentassist.antlr.internal.InternalExpressionParser typedParser = (com.avaloq.tools.ddk.xtext.expression.ui.contentassist.antlr.internal.InternalExpressionParser) parser;
			typedParser.entryRuleExpression();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExpressionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExpressionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
